generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  imageUrl      String
  name          String
  category      String
  details       String
  price         Int
  isLiked       Boolean       @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CartItem      CartItem[]
  FavouriteItem FavouriteItem[]

  @@map("products")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?    @db.ObjectId

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

model Favourites {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  items     FavouriteItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  User      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?         @db.ObjectId

  @@map("favourites")
}

model FavouriteItem {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  productId       String      @db.ObjectId
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  FavouriteList   Favourites? @relation(fields: [favouriteListId], references: [id])
  favouriteListId String?     @db.ObjectId

  @@map("favouritetems")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  FavouriteList Favourites[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
